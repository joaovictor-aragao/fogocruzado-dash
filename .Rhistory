sum(c(6, 4, 6, 6, 8, 9, 24, 5, 4, 2, 21, 16, 28, 18, 8, 16))
sum(c(4, 6, 9, 5, 5, 5, 4, 6, 10, 7, 4, 6, 7, 4, 18, 4, 10, 2, 1, 2, 1, 1, 1, 1, 1, 6, 12, 11, 8, 2, 3, 4))
181+170
# Read data
setwd("C:\\Users\\Joao\\Documents\\Dev\\criminal-dashboard")
readRenviron("./.Renviron")
# script with useful functions
source("funtions.R")
# variables
BASE_URL <- "https://api-service.fogocruzado.org.br/api/v2"
# Get token value
TOKEN <- getToken(
base_url = BASE_URL,
user = Sys.getenv("EMAIL"),
password = Sys.getenv("PASSWORD")
)
# Get states list
states_list <- getStates(base_url = BASE_URL, token = TOKEN)
# Get occurances
occs <- getOccurances(base_url = BASE_URL, token = TOKEN, states_list[1, 1])
View(occs)
View(states_list)
View(occs)
table(occs[, 5])
install.packages("shiny")
# Import libraries
library(shiny)
library(bslib)
# Import libraries
library(shiny)
library(bslib)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
# Import libraries
library(shiny)
library(bslib)
# Define UI for app that draws a histogram ----
ui <- page_sidebar(
# App title ----
title = "Hello Shiny!",
# Sidebar panel for inputs ----
sidebar = sidebar(
# Input: Slider for the number of bins ----
sliderInput(
inputId = "bins",
label = "Number of bins:",
min = 1,
max = 50,
value = 30
)
),
# Output: Histogram ----
plotOutput(outputId = "distPlot")
)
# Define server logic required to draw a histogram ----
server <- function(input, output) {
# Histogram of the Old Faithful Geyser Data ----
# with requested number of bins
# This expression that generates a histogram is wrapped in a call
# to renderPlot to indicate that:
#
# 1. It is "reactive" and therefore should be automatically
#    re-executed when inputs (input$bins) change
# 2. Its output type is a plot
output$distPlot <- renderPlot({
x    <- faithful$waiting
bins <- seq(min(x), max(x), length.out = input$bins + 1)
hist(x, breaks = bins, col = "#007bc2", border = "white",
xlab = "Waiting time to next eruption (in mins)",
main = "Histogram of waiting times")
})
}
runApp("app")
getwd()
runApp(".")
install.packages("shinythemes")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
runApp()
states_list
as.list(states_list)
as.list(states_list)$"Rio de Janeiro"
as.list(states_list)$State
lstate <- c()
lstate <- c()
for (i in 1:dim(states_list)[1]) {
lstate <- c(lstate, states_list[i, 2] = states_list[i, 1])
lstate <- c()
for (i in 1:dim(states_list)[1]) {
lstate <- c(lstate, c(states_list[i, 2] = states_list[i, 1]))
a <- c("Veronica", "Paul", "Elisabeth", "Mike", "Katy", "Tim")
b <- c(50015, 23010, 86812, 55497, 32309, 67631)
data <- data.frame(a, b)
maxWidth <- max(str_length(data[, 1]))
install.packages("stringr")
maxWidth <- max(stringr::str_length(data[, 1]))
names(choiceList) <- paste0(stringr::str_pad(data[, 1], width=maxWidth, side="right"), "|", data[, 2])
choiceList <- data[, 1]
names(choiceList) <- paste0(stringr::str_pad(data[, 1], width=maxWidth, side="right"), "|", data[, 2])
choiceList
maxWidth <- max(stringr::str_length(states_list[, 1]))
choiceList <- states_list[, 1]
names(choiceList) <- paste0(stringr::str_pad(states_list[, 1], width=maxWidth, side="right"), "|", data[, 2])
names(choiceList) <- paste0(stringr::str_pad(states_list[, 1], width=maxWidth, side="right"), "|", states_list[, 2])
choiceList
runApp()
runApp()
runApp()
runApp()
runApp()
choiceList <- states_list[, 1]
states_list[, 1]
names(choiceList) <- states_list[, 2]
choiceList
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(occs)
names(occs) <- c("State", "Latitude", "Longitute", "Date", "Motivation")
runApp()
